TITLE = 'Cordkillers'
RSS_FEED = 'http://feeds.feedburner.com/CordkillersOnlyVideo'
NS = {'blip':'http://blip.tv/dtd/blip/1.0', 'media':'http://search.yahoo.com/mrss/'}
ART = 'art-default.jpg'
ICON = 'icon-default.png'
ICON_SEARCH = 'icon-search.png'

#####################################################################
# This (optional) function is initially called by the PMS framework to
# initialize the plug-in. This includes setting up the Plug-in static
# instance along with the displayed artwork.

def Start(): # Initialize the plug-in

  Plugin.AddViewGroup("Details", viewMode="InfoList", mediaType="items")
  Plugin.AddViewGroup("List", viewMode="List", mediaType="items")

# Setup the default attributes for the ObjectContainer
ObjectContainer.title1 = TITLE
ObjectContainer.view_group = 'List'
ObjectContainer.art = R(ART)

# Setup the default attributes for the other objects
DirectoryObject.thumb = R(ICON)
DirectoryObject.art = R(ART)
VideoClipObject.thumb = R(ICON)
VideoClipObject.art = R(ART)

#####################################################################
@handler('/video/askaninja', TITLE)
def MainMenu():

  oc = ObjectContainer()

  for video in XML.ElementFromURL(RSS_FEED).xpath('//item'):

    url = video.xpath('./enclosure')[1].text
    title = video.xpath('./title')[0].text
    date = video.xpath('./pubDate')[0].text
    date = Datetime.ParseDate(date)
    summary = video.xpath('./blip:puredescription', namespaces=NS)[0].text
    thumb = video.xpath('./media:thumbnail', namespaces=NS)[0].get('url')

    if thumb[0:4] != 'http':
      thumb = 'http://a.images.blip.tv' + thumb

    duration_text = video.xpath('./blip:runtime', namespaces=NS)[0].text
    duration = int(duration_text) * 1000

    oc.add(VideoClipObject(
      url = url,
      title = title,
      summary = summary,
      thumb = Callback(Thumb, url=thumb),
      duration = duration,
      originally_available_at = date
    ))

  return oc

#####################################################################
def Thumb(url):

  try:
    data = HTTP.Request(url, cacheTime = CACHE_1MONTH).content
    return DataObject(data, 'image/jpeg')
  except:
    return Redirect(R(ICON))
